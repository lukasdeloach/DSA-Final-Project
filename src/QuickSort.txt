import java.util.Random;
/*
 * Purpose: Honors Data Structure and Algorithms Lab 10 Problem 2
 * Status: Complete and thoroughly tested
 * Last update: 11/22/22
 * Submitted:  11/22/22
 * Comment: test suite and sample run attached
 * Comment: I declare that this is entirely my own work
 * @author: Lukas DeLoach
 * @version: 2022.22.11
 */
public class QuickSort {



    /**
     * Recursive method quickSort that calls upon the partition method and itself twic. After partitioning, recursively sorts both sides before and after pivot.*/
    public static void quickSort(AscendinglyOrderedList<Customer, String> arr, int low, int high) {
        if(low < high) {
            int pivIndex = partition(arr, low, high);
            quickSort(arr, low, pivIndex-1);
            quickSort(arr, pivIndex+1, high);
        };
    }

    /**
     * Partition method that is used in quicksort method.
     * First, treats base case - if range of input is less than 3 compares the two elements and swaps accordingly.
     * Then chooses a pivot at random - could improve this by picking median of 3 numbers.
     *Then iterates through collection and makes comparisons/swapping.
     * Next, checks index i, to see if there are any numbers smaller than the pivot.
     * @return low - pivot index that will be used in quickSort
     * */
    private static int partition(AscendinglyOrderedList<Customer, String> arr, int low, int high) {
        if(high-low<2) {
            if(arr.get(low).getTotalTime()>arr.get(high).getTotalTime()) {
               swap(arr, low, high);
            }
        }
        else {
            int pivIndex = new Random().nextInt(high-low)+low;
            int pivot = arr.get(pivIndex).getTotalTime();
            if(pivIndex!=low) {
                swap(arr, low, pivIndex);
            }

            int i = low+1;

            for(int j = low+1; j < high+1; j++) {
                if(arr.get(j).getTotalTime() < pivot) {
                    swap(arr, j, i);
                    i++;
                }
            }

            if(i>1) {
                swap(arr, low, i-1);
            }
            low = i-1;
        }
        return low;
    }

    private static void swap(AscendinglyOrderedList<Customer, String> arr, int i, int j) {
        Customer temp = arr.get(i);
	arr.set(i, arr.get(j));
	arr.set(j, temp);
    }
}

