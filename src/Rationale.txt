Rationale File by Lukas DeLoach and Jess Rodgers:

At the very beginning of this project, we concluded that searching would be the critical operation throughout the programâ€™s execution. 
 
Throughout our program, we have optimized on the critical operation of searching. Since searching and validation is done in almost every case, we needed to use a data structure that would easily allow for efficient retrieval. We also needed to be able to frequently add Objects to this data structure as well as remove objects. 

We decidided that an AscendinglyOrderedList ADT would allow for fast retrieval, quick insertion, and deletion.
We used two AscendinglyOrdered List - One to hold customers and one to hold Items. Customers are added to their collection and sorted alphabetically by name.
  
The second AscendinglyOrderedList is used to hold the items and is sorted by their keys, which is their names.
 
Being that their names are sorted, searching for a given key will take O(logn). 



Leave QUEUE part for JESS** 

We also have three QueueCRAB based Checkout lines, all of which hold their respective customers. This is what we currently believe to be best, as to optimize the needs of the project. Our other option for customer storage was to create a separate list of the customers who were only shopping, and then hold a separate list of just all customer names. This would prevent us from searching the whole customer list, but would require extra storage, along with keeping up with multiple lists. So when a customer would go to check out, they would need to be removed from the shoppers list, added to the queue, and when fully removed, removed twice. We would have to search two different lists to confirm if a person existed, and if they did whether they were in the shopping center or checkout. Furthermore, every time a customer would be added to the store, they would have to be added twice instead of once. The option we are currently implementing avoids the large amount of searches for additions, which we have found to be the critical operation, and only relies on comparison checks when necessary. This is currently the best decision, but with more progress and analysis, we are open to updates if we find a better option, as we have left ourselves room in development to make effective changes with solid encapsulation techniques. 
